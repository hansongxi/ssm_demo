由于本机上面的数据库是8版本的，所以在用的时候遇到了一些坑，在此记下
1>解决java.sql.SQLException: The server time zone value '???ú±ê×??±??' is unrecognized or represents more than one time zone.

添加格式：

?serverTimezone=GMT%2B8;
使用的数据库是MySQL，驱动是8.0.11，这是由于数据库和系统时区差异所造成的，在jdbc连接的url后面加上serverTimezone=GMT即可解决问题，如果需要使用gmt+8时区，需要写成GMT%2B8，否则会被解析为空。再一个解决办法就是使用低版本的MySQL jdbc驱动，5.1.28不会存在时区的问题。

2>解决：Fri May 18 15:00:19 CST 2018 WARN: Establishing SSL connection without server's identity verification is not recommended. According to MySQL 5.5.45+, 5.6.26+ and 5.7.6+ requirements SSL connection must be established by default if explicit option isn't set. For compliance with existing applications not using SSL the verifyServerCertificate property is set to 'false'. You need either to explicitly disable SSL by setting useSSL=false, or set useSSL=true and provide truststore for server certificate verification.
或者是报
org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: 
### Error querying database.  Cause: org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.mysql.cj.jdbc.exceptions.CommunicationsException: Communications link failure

在后面加入：useSSL=false

3>解决：Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.

不能这样 driverClass="com.mysql.jdbc.Driver" 写了，应该修改成 driverClass="com.mysql.cj.jdbc.Driver"
4>关于mysql的授权问题
1、查看权限
select host, user, authentication_string, plugin from user;在mysql表中
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'WITH GRANT OPTION;被拒绝
解决的方法
#update user set host='%' where user ='root';
#flush privileges;
再查看权限即可







修改：关于mybatis中设置打印sql语句的问题
为什么mybatis要配置mybatis-config的setting
Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：
SLF4J
Apache Commons Logging
Log4j2
Log4j
JDK logging
具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。 如果一个都未找到，日志功能就会被禁用。
不少应用服务器的classpath中已经包含Commons Logging，如Tomcat和WebShpere，
 所以MyBatis会把它作为具体的日志实现。记住这点非常重要。这将意味着，
 在诸如 WebSphere的环境中——WebSphere提供了Commons Logging的私有实现，
 你的Log4J配置将被忽略。 这种做法不免让人悲催，MyBatis怎么能忽略你的配置呢？
 事实上，因Commons Logging已经存 在了，按照优先级顺序，Log4J自然就被忽略了！
 不过，如果你的应用部署在一个包含Commons Logging的环境， 而你又想用其他的日志框架
 ，你可以通过在MyBatis的配置文件mybatis-config.xml里面添加一项setting（配置）来选择一个不同的日志实现。


如何配合：
	1、在mybatis-spring中配置
	<!-- 文件中的顺序：properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,
	objectWrapperFactory?,plugins?,environments?,databaseIdProvider?,mappers?)" -->
	<!--日志部分，增加name为logImpl的setting配置，value属性（即日志的打印方式）可选有：SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING，  -->
	<settings>
		<setting name="logImpl" value="LOG4J"/>
	</settings>
	2、在log4j.properties中配置：com.wntiem.ssm_web.mapper为mapper的包名
	log4j.logger.org.mybatis=DEBUG
	log4j.logger.com.wntiem.ssm_web.mapper=DEBUG
问题：
1、在mybatis-config中配置setting的时候注意顺序
2、在写配置文件的时候最好不要从网上复制粘贴，可能会导致其他的占位符有错误
在类中调用logger，必须先写左边的才能出来
private static final Logger logger = LoggerFactory.getLogger(PersonController.class);
3、主要导包的重要性,包导入的正确性
<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.5</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<version>2.5</version>
		</dependency><!--解决Spring使用slf4j输出日志与log4j冲突的问题 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.7.13</version>
		</dependency>

